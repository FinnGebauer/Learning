SELECT *
FROM state_climate
LIMIT 5;

/* Calculate running average with a window function */
SELECT
  state,
  year,
  tempc,
  AVG(tempc) OVER (
    PARTITION BY state
    ORDER BY year
  ) running_avg_temp
FROM
  state_climate; 


 /*  finding out the lowest temperature by state */
 SELECT
  state,
  year,
  tempc,
  FIRST_VALUE(tempc) OVER (
    PARTITION BY state
    ORDER BY tempc
  ) lowest_temp
FROM
  state_climate;

/* finding out the highest temperature by state */

SELECT
  state,
  year,
  tempc,
  LAST_VALUE(tempc) OVER (
    PARTITION BY state
    ORDER BY tempc
    RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  ) highest_temp
FROM
  state_climate;

/* calculating the change in temperature by state */
SELECT
  state,
  year,
  tempc,
  tempc - LAG(tempc, 1, tempc) OVER (
    PARTITION BY state
    ORDER BY year
  ) AS change_in_temp
FROM
  state_climate
ORDER BY 
  change_in_temp DESC; 

/* Rank the coldest temperatures */
SELECT
  state,
  year,
  tempc,
  RANK() OVER (
    ORDER BY tempc
  ) AS coldest_rank
FROM
  state_climate;

/* Rank the warmest temperatures */
SELECT
  state,
  year,
  tempc,
  RANK() OVER (
    PARTITION BY state
    ORDER BY tempc DESC
  ) AS warmest_rank
FROM
  state_climate; 

/* create quartiles using the ntile function */
SELECT
  state,
  year,
  tempc,
  NTILE(4) OVER (
    PARTITION BY state
    ORDER BY tempc ASC
  ) AS temp_quartiles
FROM
  state_climate;

/*create quintiles using the ntile function */
SELECT
  state,
  year,
  tempc,
  NTILE(5) OVER (
    ORDER BY tempc ASC
  ) AS temp_quintiles
FROM
  state_climate;
